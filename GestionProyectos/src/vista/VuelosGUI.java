
package vista;

import dao.ReservaDAO;
import dao.VueloDAO;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Reserva;
import modelo.Usuario;
import modelo.Vuelo;
import util.VueloRealAPI;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.SwingWorker;
import util.ConexionBD;


/**
 *
 * @author jh599
 */
public class VuelosGUI extends javax.swing.JFrame {
  private int idUsuario;
    private String nombreUsuario;
    private ReservaDAO reservaDAO;
    private VueloDAO vueloDAO;
    private DefaultTableModel modeloVuelos;
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    // Nuevo constructor
    public VuelosGUI(int idUsuario, String nombreUsuario) {
        this.idUsuario = idUsuario;
        this.nombreUsuario = nombreUsuario;
        this.reservaDAO = new ReservaDAO();
        this.vueloDAO = new VueloDAO();

        initComponents();

        // === Luego configurar componentes ===
        setTitle("✈️ Sistema de Reservas - Bienvenido, " + nombreUsuario);
        setLocationRelativeTo(null);

        // Conectar el modelo de la tabla
        modeloVuelos = (DefaultTableModel) jTable1.getModel();

        // Cargar los vuelos al iniciar
        cargarVuelos();
           setLocationRelativeTo(null);    

    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblFiltroBusqueda = new javax.swing.JLabel();
        lblTextoOrigen = new javax.swing.JLabel();
        txtOrigen = new javax.swing.JTextField();
        lblDestino = new javax.swing.JLabel();
        txtDestino = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        SpinnerFecha = new javax.swing.JSpinner();
        btnBuscarVuelo = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnVuelosAire = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnHacerReserva = new javax.swing.JButton();
        btnAgregarASistema = new javax.swing.JButton();
        btnIrIntinerario = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFiltroBusqueda.setForeground(new java.awt.Color(255, 255, 255));
        lblFiltroBusqueda.setText("Filtros de busqueda");
        jPanel2.add(lblFiltroBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 18, 165, -1));

        lblTextoOrigen.setForeground(new java.awt.Color(255, 255, 255));
        lblTextoOrigen.setText("Origen:");
        jPanel2.add(lblTextoOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 55, -1, -1));
        jPanel2.add(txtOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 52, 71, -1));

        lblDestino.setForeground(new java.awt.Color(255, 255, 255));
        lblDestino.setText("Destino:");
        jPanel2.add(lblDestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 55, 49, -1));
        jPanel2.add(txtDestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 52, 71, -1));

        lblFecha.setForeground(new java.awt.Color(255, 255, 255));
        lblFecha.setText("Fecha:");
        jPanel2.add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 55, -1, -1));
        jPanel2.add(SpinnerFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(364, 52, 78, -1));

        btnBuscarVuelo.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscarVuelo.setText("Buscar vuelo");
        btnBuscarVuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarVueloActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscarVuelo, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 52, -1, -1));

        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel2.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 52, -1, -1));

        btnVuelosAire.setForeground(new java.awt.Color(255, 255, 255));
        btnVuelosAire.setText("Vuelos en el aire");
        btnVuelosAire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVuelosAireActionPerformed(evt);
            }
        });
        jPanel2.add(btnVuelosAire, new org.netbeans.lib.awtextra.AbsoluteConstraints(699, 52, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Aerolinea", "Número de vuelo", "Origen", "Destino", "Salida", "Asientos", "Precio"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 102, 825, -1));

        btnHacerReserva.setText("Hacer reserva");
        btnHacerReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHacerReservaActionPerformed(evt);
            }
        });
        jPanel2.add(btnHacerReserva, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 547, -1, -1));

        btnAgregarASistema.setText("Agregar a mi sistema ");
        btnAgregarASistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarASistemaActionPerformed(evt);
            }
        });
        jPanel2.add(btnAgregarASistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 547, -1, -1));

        btnIrIntinerario.setForeground(new java.awt.Color(255, 255, 255));
        btnIrIntinerario.setText("Intinerario");
        btnIrIntinerario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIrIntinerarioActionPerformed(evt);
            }
        });
        jPanel2.add(btnIrIntinerario, new org.netbeans.lib.awtextra.AbsoluteConstraints(581, 547, 99, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarVueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarVueloActionPerformed
       cargarVuelos();
    }//GEN-LAST:event_btnBuscarVueloActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
     txtOrigen.setText("");
    txtDestino.setText("");
    SpinnerFecha.setValue(new java.util.Date());
    cargarVuelos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnHacerReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHacerReservaActionPerformed
      int fila = jTable1.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "⚠️ Seleccione un vuelo.");
            return;
        }

        Object idObj = jTable1.getValueAt(fila, 0);
        if (!(idObj instanceof Integer)) {
            JOptionPane.showMessageDialog(this, "❌ No se puede reservar este vuelo.\nSolo los vuelos de tu sistema son reservables.");
            return;
        }

        int idVuelo = (Integer) idObj;
        if (idVuelo <= 0) {
            JOptionPane.showMessageDialog(this, "🚫 Este vuelo es solo informativo.\nAgrégalo a tu sistema primero.");
            return;
        }

        String numeroVuelo = (String) jTable1.getValueAt(fila, 2);
        int asientosDisp = (int) jTable1.getValueAt(fila, 6);

        String input = JOptionPane.showInputDialog(this, "¿Cuántos asientos?");
        int cantidad;
        try {
            cantidad = Integer.parseInt(input);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "❌ Cantidad inválida.");
            return;
        }

        if (cantidad <= 0 || cantidad > asientosDisp) {
            JOptionPane.showMessageDialog(this, "❌ No hay suficientes asientos.");
            return;
        }

        Usuario usuario = new Usuario();
        usuario.setIdUsuario(idUsuario);

        Vuelo vuelo = new Vuelo();
        vuelo.setIdVuelo(idVuelo);

        Reserva reserva = new Reserva();
        reserva.setUsuario(usuario);
        reserva.setVuelo(vuelo);
        reserva.setCantidadAsientos(cantidad);

        if (reservaDAO.crearReserva(reserva)) {
            JOptionPane.showMessageDialog(this, "✅ Reserva exitosa.");
            cargarVuelos(); // Actualizar
        } else {
            JOptionPane.showMessageDialog(this, "❌ Error al reservar.");
        }
    }//GEN-LAST:event_btnHacerReservaActionPerformed

    private void btnVuelosAireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVuelosAireActionPerformed
      // 1. Limpiar la tabla
    modeloVuelos.setRowCount(0);

    // 2. Crear un SwingWorker
    SwingWorker<List<Vuelo>, Void> worker = new SwingWorker<>() {
        @Override
        protected List<Vuelo> doInBackground() throws Exception {
            // Esta parte se ejecuta en un hilo de fondo
            VueloRealAPI api = new VueloRealAPI();
            return api.obtenerVuelosReales(); // Llamada a la API
        }

        @Override
        protected void done() {
            // Esta parte se ejecuta en el hilo de la GUI cuando termina doInBackground()
            try {
                List<Vuelo> vuelosReales = get(); // Obtiene el resultado

                if (vuelosReales.isEmpty()) {
                    JOptionPane.showMessageDialog(VuelosGUI.this,
                        "❌ No se pudieron obtener vuelos en el aire.\nVerifique conexión a internet.",
                        "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                for (Vuelo v : vuelosReales) {
                    modeloVuelos.addRow(new Object[]{
                        v.getIdVuelo(),
                        v.getAerolinea().getNombre(),
                        v.getNumeroVuelo(),
                        v.getOrigen(),
                        v.getDestino(),
                        v.getFechaSalida().format(formatter),
                        v.getAsientosDisponibles(),
                        String.format("%.2f", v.getPrecio())
                    });
                }

                JOptionPane.showMessageDialog(VuelosGUI.this,
                    "✅ " + vuelosReales.size() + " vuelos en el aire cargados.");

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(VuelosGUI.this,
                    "❌ Error al obtener los vuelos:\n" + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    };

    worker.execute();
    }//GEN-LAST:event_btnVuelosAireActionPerformed

    private void btnIrIntinerarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIrIntinerarioActionPerformed

    new IntinerarioGUI(idUsuario, nombreUsuario).setVisible(true);
    this.dispose();
    }//GEN-LAST:event_btnIrIntinerarioActionPerformed

    private void btnAgregarASistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarASistemaActionPerformed
       int fila = jTable1.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "⚠️ Seleccione un vuelo para agregar.");
            return;
        }

        Object idObj = jTable1.getValueAt(fila, 0);
        if (idObj instanceof Integer && (Integer) idObj > 0) {
            JOptionPane.showMessageDialog(this, "✅ Este vuelo ya está en tu sistema.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "¿Desea agregar este vuelo a su sistema?\nPodrá reservar asientos como cualquier otro vuelo.",
            "Agregar Vuelo",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            agregarVueloDesdeAPI(fila);
        }
    }//GEN-LAST:event_btnAgregarASistemaActionPerformed

    /**
     * @param args the command line arguments
     */
    // === MÉTODOS AUXILIARES PARA AGREGAR VUELOS DE LA API ===

    private void agregarVueloDesdeAPI(int fila) {
        String numeroVuelo = (String) jTable1.getValueAt(fila, 2);
        String origen = (String) jTable1.getValueAt(fila, 3);
        String destino = (String) jTable1.getValueAt(fila, 4);
        String horaStr = (String) jTable1.getValueAt(fila, 5);
        int asientos = (int) jTable1.getValueAt(fila, 6);
        double precio = Double.parseDouble(jTable1.getValueAt(fila, 7).toString());
        String aerolineaNombre = (String) jTable1.getValueAt(fila, 1);

        java.time.LocalDateTime fechaSalida;
        try {
            fechaSalida = java.time.LocalDateTime.parse(horaStr, formatter);
        } catch (Exception ex) {
            fechaSalida = java.time.LocalDateTime.now().plusHours(1);
        }

        int idAerolinea = obtenerOCrearAerolinea(aerolineaNombre);
        if (idAerolinea == -1) {
            JOptionPane.showMessageDialog(this, "❌ No se pudo registrar la aerolínea.");
            return;
        }

        if (insertarVueloEnBD(idAerolinea, numeroVuelo, origen, destino, fechaSalida, asientos, precio)) {
            JOptionPane.showMessageDialog(this, "✅ Vuelo agregado a tu sistema.\nYa puedes reservar asientos.");
            cargarVuelos();
        } else {
            JOptionPane.showMessageDialog(this, "❌ No se pudo agregar el vuelo.");
        }
    }

    private int obtenerOCrearAerolinea(String nombre) {
        String sqlSelect = "SELECT id_aerolinea FROM Aerolinea WHERE nombre = ?";
        String sqlInsert = "INSERT INTO Aerolinea (nombre, codigo) VALUES (?, ?); SELECT SCOPE_IDENTITY();";

        try (Connection conn = ConexionBD.getConnection()) {
            PreparedStatement stmt = conn.prepareStatement(sqlSelect);
            stmt.setString(1, nombre);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("id_aerolinea");
            }

            String codigo = nombre.length() >= 2 ? nombre.substring(0, 2).toUpperCase() : "XX";
            stmt = conn.prepareStatement(sqlInsert);
            stmt.setString(1, nombre);
            stmt.setString(2, codigo);

            ResultSet result = stmt.executeQuery();
            if (result.next()) {
                return (int) result.getDouble(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    private boolean insertarVueloEnBD(int idAerolinea, String numeroVuelo, String origen, String destino,
                                      java.time.LocalDateTime fechaSalida, int asientos, double precio) {
        String sql = "INSERT INTO Vuelo (id_aerolinea, numero_vuelo, origen, destino, " +
                     "fecha_salida, fecha_llegada, asientos_totales, asientos_disponibles, " +
                     "precio, escalas, estado) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        try (Connection conn = ConexionBD.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, idAerolinea);
            stmt.setString(2, numeroVuelo);
            stmt.setString(3, origen);
            stmt.setString(4, destino);
            stmt.setObject(5, fechaSalida);
            stmt.setObject(6, fechaSalida.plusHours(2));
            stmt.setInt(7, asientos);
            stmt.setInt(8, asientos);
            stmt.setDouble(9, precio);
            stmt.setInt(10, 0);
            stmt.setString(11, "Activo");

            return stmt.executeUpdate() > 0;

        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
    
 private void cargarVuelos() {
        modeloVuelos.setRowCount(0); // Limpia la tabla

        String origen = txtOrigen.getText().trim();
        String destino = txtDestino.getText().trim();

        LocalDate fecha;
        try {
            fecha = ((java.util.Date) SpinnerFecha.getValue()).toInstant()
                    .atZone(ZoneId.systemDefault()).toLocalDate();
        } catch (Exception e) {
            fecha = LocalDate.now();
        }

        List<Vuelo> vuelos = vueloDAO.buscarVuelos(
            origen.isEmpty() ? null : origen,
            destino.isEmpty() ? null : destino,
            fecha
        );

        for (Vuelo v : vuelos) {
            modeloVuelos.addRow(new Object[]{
                v.getIdVuelo(),
                v.getAerolinea().getNombre(),
                v.getNumeroVuelo(),
                v.getOrigen(),
                v.getDestino(),
                v.getFechaSalida().format(formatter),
                v.getAsientosDisponibles(),
                String.format("%.2f", v.getPrecio())
            });
        }
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner SpinnerFecha;
    private javax.swing.JButton btnAgregarASistema;
    private javax.swing.JButton btnBuscarVuelo;
    private javax.swing.JButton btnHacerReserva;
    private javax.swing.JButton btnIrIntinerario;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnVuelosAire;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblDestino;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFiltroBusqueda;
    private javax.swing.JLabel lblTextoOrigen;
    private javax.swing.JTextField txtDestino;
    private javax.swing.JTextField txtOrigen;
    // End of variables declaration//GEN-END:variables
}
